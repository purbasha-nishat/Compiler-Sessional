Line 1: type_specifier : INT

int 

Line 2: type_specifier : INT

int 

Line 2: declaration_list : ID

a

Line 2: var_declaration : type_specifier declaration_list SEMICOLON 

int a;


Line 2: statement : var_declaration

int a;


Line 2: statements : statement

int a;


Line 3: type_specifier : INT

int 

Line 3: declaration_list : ID

b

Line 3: var_declaration : type_specifier declaration_list SEMICOLON 

int b;


Line 3: statement : var_declaration

int b;


Line 3: statements : statements statement

int a;
int b;


Line 4: type_specifier : FLOAT

float 

Line 4: declaration_list : ID

c

Line 4: declaration_list : declaration_list COMMA ID

c,d

Line 4: var_declaration : type_specifier declaration_list SEMICOLON 

float c,d;


Line 4: statement : var_declaration

float c,d;


Line 4: statements : statements statement

int a;
int b;
float c,d;


Line 5: variable : ID

b

Line 5: variable : ID

a

Line 5: factor : variable

a

Line 5: unary_expression : factor 

a

Line 5: term :	unary_expression

a

Line 5: variable : ID

a

Line 5: factor : variable

a

Line 5: unary_expression : factor 

a

Line 5: term :	term MULOP unary_expression

a*a

Line 5: simple_expression : term

a*a

Line 5: rel_expression	: simple_expression

a*a

Line 5: logic_expression : rel_expression

a*a

Line 5: expression : logic_expression

a*a

Line 5: factor : LPAREN expression RPAREN

(a*a)

Line 5: unary_expression : factor 

(a*a)

Line 5: term :	unary_expression

(a*a)

Line 5: variable : ID

a

Line 5: factor : variable

a

Line 5: unary_expression : factor 

a

Line 5: term :	term MULOP unary_expression

(a*a)%a

Line 5: simple_expression : term

(a*a)%a

Line 5: rel_expression	: simple_expression

(a*a)%a

Line 5: logic_expression : rel_expression

(a*a)%a

Line 5: expression : variable ASSIGNOP logic_expression

b=(a*a)%a

Line 5: expression_statement 	: expression SEMICOLON

b=(a*a)%a;


Line 5: statement : expression_statement

b=(a*a)%a;


Line 5: statements : statements statement

int a;
int b;
float c,d;
b=(a*a)%a;


Line 6: variable : ID

b

Line 6: variable : ID

c

Line 6: factor : variable

c

Line 6: unary_expression : factor 

c

Line 6: term :	unary_expression

c

Line 6: variable : ID

d

Line 6: factor : variable

d

Line 6: unary_expression : factor 

d

Line 6: term :	term MULOP unary_expression

c*d

Line 6: simple_expression : term

c*d

Line 6: rel_expression	: simple_expression

c*d

Line 6: logic_expression : rel_expression

c*d

Line 6: expression : logic_expression

c*d

Line 6: factor : LPAREN expression RPAREN

(c*d)

Line 6: unary_expression : factor 

(c*d)

Line 6: term :	unary_expression

(c*d)

Line 6: variable : ID

a

Line 6: factor : variable

a

Line 6: unary_expression : factor 

a

Line 6: term :	term MULOP unary_expression

Error at line 6: Non-Integer operand on modulus operator 

(c*d)%a

Line 6: simple_expression : term

(c*d)%a

Line 6: rel_expression	: simple_expression

(c*d)%a

Line 6: logic_expression : rel_expression

(c*d)%a

Line 6: expression : variable ASSIGNOP logic_expression

b=(c*d)%a

Line 6: expression_statement 	: expression SEMICOLON

b=(c*d)%a;


Line 6: statement : expression_statement

b=(c*d)%a;


Line 6: statements : statements statement

int a;
int b;
float c,d;
b=(a*a)%a;
b=(c*d)%a;


Line 7: variable : ID

b

Line 7: variable : ID

b

Line 7: factor : variable

b

Line 7: unary_expression : factor 

b

Line 7: term :	unary_expression

b

Line 7: variable : ID

c

Line 7: factor : variable

c

Line 7: unary_expression : factor 

c

Line 7: term :	term MULOP unary_expression

Error at line 7: Non-Integer operand on modulus operator 

b%c

Line 7: simple_expression : term

b%c

Line 7: rel_expression	: simple_expression

b%c

Line 7: logic_expression : rel_expression

b%c

Line 7: expression : variable ASSIGNOP logic_expression

b=b%c

Line 7: expression_statement 	: expression SEMICOLON

b=b%c;


Line 7: statement : expression_statement

b=b%c;


Line 7: statements : statements statement

int a;
int b;
float c,d;
b=(a*a)%a;
b=(c*d)%a;
b=b%c;


Line 8: compound_statement : LCURL statements RCURL

{

int a;
int b;
float c,d;
b=(a*a)%a;
b=(c*d)%a;
b=b%c;
}


ScopeTable # 1.1
 7 --> < a , ID > 
 8 --> < b , ID > 
 9 --> < c , ID > 
 10 --> < d , ID > 

ScopeTable # 1
 24 --> < foo , ID > 


Line 8: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int foo(){
int a;
int b;
float c,d;
b=(a*a)%a;
b=(c*d)%a;
b=b%c;
}

Line 8: unit : func_definition

int foo(){
int a;
int b;
float c,d;
b=(a*a)%a;
b=(c*d)%a;
b=b%c;
}

Line 8: program : unit 

int foo(){
int a;
int b;
float c,d;
b=(a*a)%a;
b=(c*d)%a;
b=b%c;
}

Line 8: start : program 

ScopeTable # 1
 24 --> < foo , ID > 

Total lines: 8
Total errors: 2
